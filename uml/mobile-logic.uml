@startuml mobile-logic

class DappEventBus {
    - static list: Array<Operator>
    + static emit(action: string, payload: any):void
    + static publishEvent(option: {eventName: string, data?: any, callback?: () => void, filter?: (origin: string) => boolean}):void
    + static registerOperator(operator: Operator): void
    + static unregisterOperator(operator: Operator): void
}

interface IDappOverlay {
  requestAccounts(dapp: DappStoreItem): Promise<boolean>;
  sendTransaction(params: SendTransactionParams): Promise<boolean>;
}

class DappOverlay implements IDappOverlay{
  requestAccounts(dapp: DappStoreItem): Promise<boolean>;
  sendTransaction(params: SendTransactionParams): Promise<boolean>;
}

class Operator {
    - _stream: DappInteractionStream
    + constructor(stream: DappInteractionStream): this
    * dappManager: IDappManager;
    * dappOverlay: IDappOverlay;
    ...
    - onCreate(): void
    + onMessage(event:NativeEvent): void
    + onDestory(): void
   }

class WebView {
    + postMessage(message: string): void
}

class MobileStream extends DappInteractionStream{
    - _webViewRef: WebView
    + constructor(webView: WebView): this
    + _write(): void
}

interface IDappManager<T = CACommonState> {
  getState(): Promise<T>;
  isLogged(): Promise<boolean>;
  originIsAuthorized(origin: string): Promise<boolean>;
  isActive(origin: string): Promise<boolean>;
  accounts(origin: string): Promise<Accounts>;
  chainId(): Promise<ChainIds>;
  chainIds(): Promise<ChainIds>;
  chainsInfo(): Promise<ChainsInfo>;
  getChainInfo(chainId: ChainId): Promise<ChainItemType | undefined>;
  addDapp(dapp: DappStoreItem): Promise<void>;
  updateDapp(dapp: DappStoreItem): Promise<void>;
  isLocked(): Promise<boolean>;
  getRpcUrl(chainId: ChainId): Promise<string | undefined>;
  getCaInfo(chainId: ChainId): Promise<CAInfo | undefined>;
}
class DappManager implements IDappManager {
  getState(): Promise<T>;
  isLogged(): Promise<boolean>;
  originIsAuthorized(origin: string): Promise<boolean>;
  isActive(origin: string): Promise<boolean>;
  accounts(origin: string): Promise<Accounts>;
  chainId(): Promise<ChainIds>;
  chainIds(): Promise<ChainIds>;
  chainsInfo(): Promise<ChainsInfo>;
  getChainInfo(chainId: ChainId): Promise<ChainItemType | undefined>;
  addDapp(dapp: DappStoreItem): Promise<void>;
  updateDapp(dapp: DappStoreItem): Promise<void>;
  isLocked(): Promise<boolean>;
  getRpcUrl(chainId: ChainId): Promise<string | undefined>;
  getCaInfo(chainId: ChainId): Promise<CAInfo | undefined>;
}

Object Redux {
   store: AppState;
   actions: Actions;
} 


class DappMiddle {
  + event: IEvent;
  ---
  + static middle(): void;
  + static registerEvent(event: IEvent) void
}

Object DappWebView {
    webViewRef: WebView
    stream: MobileStream
    Operator: Operator
}

note right of Operator::constructor
constructor(stream){
    this.onCreate();
}
onCreate=()=>{
    DappEventBus.registerOperator(this);
}
onDestory=()=>{
    DappEventBus.unregisterOperator(this);
}
dappManager: 管理store数据
dappOverlay: 弹窗管理，用作用户确认
end note

note bottom of DappWebView
const BrowserTab=(){
    const webViewRef = useRef<WebView | null>(null);
  const operatorRef = useRef<DappMobileOperator | null>(null);
  const [entryScriptWeb3, setEntryScriptWeb3] = useState<string>();
  useEffectOnce(() => {
    const getEntryScriptWeb3 = async () => {
      const script = await EntryScriptWeb3.get();
      setEntryScriptWeb3(script);
    };

    getEntryScriptWeb3();
    return () => {
      operatorRef?.current?.onDestroy();
    };
  });
  const initOperator = useCallback((origin: string) => {
    operatorRef.current = new DappMobileOperator({
      origin,
      stream: new MobileStream(webViewRef.current!),
      dappManager: new DappMobileManager({ store: store as any }),
      dappOverlay: new DappOverlay(),
    });
  }, []);
  return <WebView 
            ref={webViewRef}        
            onMessage={({ nativeEvent }) => {
              operatorRef.current?.handleRequestMessage(nativeEvent.data);
            }} />
}
end note

Operator --> DappEventBus

MobileStream --* Operator
DappManager --* Operator
DappOverlay --* Operator

Redux --> DappManager: store
Redux --> DappMiddle: middle,action

WebView --* DappWebView
WebView --* MobileStream
MobileStream --> DappWebView

DappEventBus --*  DappMiddle: emit

@enduml
